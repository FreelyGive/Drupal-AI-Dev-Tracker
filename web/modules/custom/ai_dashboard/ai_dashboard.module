<?php

/**
 * @file
 * Contains ai_dashboard.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ai_dashboard_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ai_dashboard':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('AI Dashboard provides a comprehensive view of AI module contributions.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function ai_dashboard_theme() {
  return [
    'ai_dashboard' => [
      'variables' => [
        'companies' => [],
        'contributors' => [],
        'issues' => [],
        'modules' => [],
      ],
    ],
    'ai_calendar_dashboard' => [
      'variables' => [
        'calendar_data' => [],
        'backlog_data' => [],
        'week_start' => NULL,
        'week_end' => NULL,
        'week_offset' => 0,
        'filter_options' => [],
        'user_has_admin_permission' => FALSE,
      ],
    ],
    'ai_priority_kanban' => [
      'variables' => [
        'kanban_data' => [],
        'user_has_admin_permission' => FALSE,
        'filter_options' => [],
        'selected_tag' => 'priority',
        'selected_project' => '',
      ],
    ],
    'ai_dashboard_public_docs' => [
      'variables' => [
        'import_configs' => [],
      ],
    ],
    'ai_import_configurations' => [
      'variables' => [
        'configurations' => [],
      ],
    ],
    'admin_navigation' => [
      'variables' => [
        'navigation_items' => [],
        'active_page' => NULL,
      ],
    ],
    'admin_tools_landing' => [
      'variables' => [],
    ],
    'assignment_records_table' => [
      'variables' => [
        'assignments' => [],
        'issue_id' => NULL,
      ],
    ],
    'ai_project_issues' => [
      'variables' => [
        'project' => NULL,
        'issues' => [],
        'filters' => [],
        'filter_options' => [],
        'user_has_admin' => FALSE,
      ],
    ],
    'ai_projects_list' => [
      'variables' => [
        'projects' => [],
        'user_has_admin' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_presave().
 */
function ai_dashboard_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // Handle default kanban project - ensure only one is set as default
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'ai_project') {
    if ($entity->hasField('field_is_default_kanban_project') && 
        !$entity->get('field_is_default_kanban_project')->isEmpty() && 
        $entity->get('field_is_default_kanban_project')->value) {
      
      // Clear any other default projects
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $other_defaults = $storage->getQuery()
        ->condition('type', 'ai_project')
        ->condition('field_is_default_kanban_project', TRUE)
        ->condition('nid', $entity->id(), '!=')
        ->accessCheck(FALSE)
        ->execute();
      
      if (!empty($other_defaults)) {
        $other_nodes = $storage->loadMultiple($other_defaults);
        foreach ($other_nodes as $other_node) {
          $other_node->set('field_is_default_kanban_project', FALSE);
          $other_node->save();
        }
        \Drupal::messenger()->addStatus(t('Previous default kanban project has been unset.'));
      }
    }
  }
  
  // Clear tag mapping cache when AI issues are saved with new tags
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'ai_issue') {
    // Check if this is an update and tags have changed
    if (!$entity->isNew() && $entity->hasField('field_issue_tags')) {
      $original = $entity->original ?? NULL;
      if ($original && $original->hasField('field_issue_tags')) {
        $old_tags = $original->get('field_issue_tags')->value ?? '';
        $new_tags = $entity->get('field_issue_tags')->value ?? '';
        if ($old_tags !== $new_tags) {
          // Tags changed, invalidate cache
          \Drupal::service('cache_tags.invalidator')->invalidateTags(['ai_dashboard:tag_mappings']);
        }
      }
    }
    // For new nodes with tags, also clear cache
    elseif ($entity->isNew() && $entity->hasField('field_issue_tags')) {
      $tags = $entity->get('field_issue_tags')->value ?? '';
      if (!empty($tags)) {
        \Drupal::service('cache_tags.invalidator')->invalidateTags(['ai_dashboard:tag_mappings']);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function ai_dashboard_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  
  // Only add assignment records display to AI Issue content type.
  if ($node->bundle() !== 'ai_issue') {
    return;
  }
  
  // Only show for existing nodes (not new ones).
  if ($node->isNew()) {
    return;
  }
  
  // Get all assignment records for this issue.
  $assignments = \Drupal\ai_dashboard\Entity\AssignmentRecord::getAssignmentsForIssue($node->id());
  
  if (!empty($assignments)) {
    // Build assignment records display.
    $assignment_data = [];
    foreach ($assignments as $assignment) {
      $assignee = $assignment->get('assignee_id')->entity;
      $week_date = \Drupal\ai_dashboard\Entity\AssignmentRecord::weekIdToDate($assignment->get('week_id')->value);
      
      $assignment_data[] = [
        'id' => $assignment->id(),
        'assignee_name' => $assignee ? $assignee->getTitle() : 'Unknown',
        'assignee_id' => $assignment->get('assignee_id')->target_id,
        'week_id' => $assignment->get('week_id')->value,
        'week_date' => $week_date->format('M j, Y'),
        'week_start' => $week_date->format('Y-m-d'),
        'issue_status' => $assignment->get('issue_status_at_assignment')->value,
        'source' => $assignment->get('source')->value,
        'assigned_date' => date('M j, Y g:i A', $assignment->get('assigned_date')->value),
      ];
    }
    
    // Sort by week_id descending (most recent first).
    usort($assignment_data, function($a, $b) {
      return $b['week_id'] <=> $a['week_id'];
    });
    
    // Add assignment records section to form.
    $form['assignment_records'] = [
      '#type' => 'details',
      '#title' => t('Assignment History (@count records)', ['@count' => count($assignment_data)]),
      '#description' => t('Shows all week-specific assignments for this issue. You can manage assignments through the calendar interface or add/remove records here.'),
      '#open' => FALSE,
      '#weight' => 50,
    ];
    
    // Add the assignment table.
    $form['assignment_records']['table'] = [
      '#theme' => 'assignment_records_table',
      '#assignments' => $assignment_data,
      '#issue_id' => $node->id(),
    ];
    
    // Add action links.
    $form['assignment_records']['actions'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['assignment-actions']],
    ];
    
    $form['assignment_records']['actions']['add_assignment'] = [
      '#type' => 'link',
      '#title' => t('Add New Assignment Record'),
      '#url' => \Drupal\Core\Url::fromRoute('entity.assignment_record.add_form', [], [
        'query' => ['issue_id' => $node->id()],
      ]),
      '#attributes' => [
        'class' => ['button', 'button--primary'],
        'target' => '_blank',
      ],
    ];
    
    $form['assignment_records']['actions']['manage_assignments'] = [
      '#type' => 'link',  
      '#title' => t('Manage All Assignment Records'),
      '#url' => \Drupal\Core\Url::fromRoute('entity.assignment_record.collection'),
      '#attributes' => [
        'class' => ['button'],
        'target' => '_blank',
      ],
    ];
  }
}
