<?php

/**
 * @file
 * Install, update and uninstall functions for AI Dashboard module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 */
function ai_dashboard_install() {
  // Create content types and fields programmatically.
  ai_dashboard_create_content_types();
  // Fields will be created via configuration files instead.
}

/**
 * Create content types for the AI Dashboard.
 */
function ai_dashboard_create_content_types() {
  $types = [
    'ai_company' => [
      'name' => 'AI Company',
      'description' => 'Companies that contribute to AI modules',
    ],
    'ai_contributor' => [
      'name' => 'AI Contributor',
      'description' => 'Individual contributors to AI modules',
    ],
    'ai_module' => [
      'name' => 'AI Module',
      'description' => 'AI and related modules being tracked',
    ],
    'ai_issue' => [
      'name' => 'AI Issue',
      'description' => 'Drupal.org issues for AI modules',
    ],
    'ai_resource_allocation' => [
      'name' => 'AI Resource Allocation',
      'description' => 'Weekly resource commitments by contributors',
    ],
  ];

  foreach ($types as $type_id => $type_info) {
    $type = NodeType::create([
      'type' => $type_id,
      'name' => $type_info['name'],
      'description' => $type_info['description'],
      'new_revision' => TRUE,
      'preview_mode' => DRUPAL_OPTIONAL,
      'display_submitted' => FALSE,
    ]);
    $type->save();
  }
}

/**
 * Create fields for the AI Dashboard content types.
 */
function ai_dashboard_create_fields() {
  $field_configs = ai_dashboard_get_field_configs();

  foreach ($field_configs as $config) {
    ai_dashboard_create_field($config);
  }
}

/**
 * Get field configurations for all content types.
 */
function ai_dashboard_get_field_configs() {
  return [
    // AI Company fields.
    [
      'field_name' => 'field_company_website',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'field_type' => 'link',
      'label' => 'Website',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_company_size',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'field_type' => 'list_string',
      'label' => 'Company Size',
      'required' => FALSE,
      'settings' => [
        'allowed_values' => [
          'startup' => 'Startup (1-10)',
          'small' => 'Small (11-50)',
          'medium' => 'Medium (51-200)',
          'large' => 'Large (201-1000)',
          'enterprise' => 'Enterprise (1000+)',
        ],
      ],
    ],

    // AI Contributor fields.
    [
      'field_name' => 'field_drupal_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'Drupal.org Username',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_contributor_company',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'entity_reference',
      'label' => 'Company',
      'required' => FALSE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_company'],
        ],
      ],
    ],
    [
      'field_name' => 'field_contributor_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'Role/Title',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'list_string',
      'label' => 'Tracker Role',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'allowed_values' => [
          'developer' => 'Developer',
          'frontend' => 'Front-end',
          'management' => 'Management',
          'designer' => 'Designer',
          'qa' => 'QA/Testing',
          'devops' => 'DevOps',
          'pm' => 'Project Manager',
        ],
      ],
    ],
    [
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'GitLab Username/Email',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_contributor_email',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'email',
      'label' => 'Email',
      'required' => FALSE,
    ],

    // AI Module fields.
    [
      'field_name' => 'field_module_machine_name',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'string',
      'label' => 'Machine Name',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_module_project_url',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'link',
      'label' => 'Drupal.org Project URL',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_module_category',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'list_string',
      'label' => 'Category',
      'required' => FALSE,
      'settings' => [
        'allowed_values' => [
          'core_ai' => 'Core AI',
          'provider' => 'AI Provider',
          'integration' => 'AI Integration',
          'utility' => 'AI Utility',
          'related' => 'Related Module',
        ],
      ],
    ],

    // AI Issue fields.
    [
      'field_name' => 'field_issue_number',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'integer',
      'label' => 'Issue Number',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_issue_url',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'link',
      'label' => 'Issue URL',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_issue_module',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'entity_reference',
      'label' => 'Module',
      'required' => TRUE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_module'],
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_assignees',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'entity_reference',
      'label' => 'Assignees',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_contributor'],
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_status',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'list_string',
      'label' => 'Status',
      'required' => TRUE,
      'settings' => [
        'allowed_values' => [
          'active' => 'Active',
          'needs_review' => 'Needs Review',
          'needs_work' => 'Needs Work',
          'rtbc' => 'Reviewed & Tested by the Community',
          'fixed' => 'Fixed',
          'closed_duplicate' => 'Closed (Duplicate)',
          'closed_outdated' => 'Closed (Outdated)',
          'closed_wontfix' => 'Closed (Won\'t Fix)',
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_priority',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'list_string',
      'label' => 'Priority',
      'required' => TRUE,
      'settings' => [
        'allowed_values' => [
          'critical' => 'Critical',
          'major' => 'Major',
          'normal' => 'Normal',
          'minor' => 'Minor',
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_tags',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'string',
      'label' => 'Tags',
      'required' => FALSE,
      'cardinality' => -1,
    ],

    // AI Resource Allocation fields.
    [
      'field_name' => 'field_allocation_contributor',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'entity_reference',
      'label' => 'Contributor',
      'required' => TRUE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_contributor'],
        ],
      ],
    ],
    [
      'field_name' => 'field_allocation_week',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'datetime',
      'label' => 'Week Starting',
      'required' => TRUE,
      'settings' => [
        'datetime_type' => 'date',
      ],
    ],
    [
      'field_name' => 'field_allocation_days',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'decimal',
      'label' => 'Days Allocated',
      'required' => TRUE,
      'settings' => [
        'precision' => 3,
        'scale' => 1,
        'min' => 0,
        'max' => 7,
      ],
    ],
    [
      'field_name' => 'field_allocation_issues',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'entity_reference',
      'label' => 'Related Issues',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_issue'],
        ],
      ],
    ],
  ];
}

/**
 * Create a field based on configuration.
 */
function ai_dashboard_create_field($config) {
  $field_name = $config['field_name'];
  $entity_type = $config['entity_type'];
  $bundle = $config['bundle'];

  // Create field storage if it doesn't exist.
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => $config['field_type'],
      'cardinality' => $config['cardinality'] ?? 1,
      'settings' => $config['settings'] ?? [],
    ]);
    $field_storage->save();
  }

  // Create field instance.
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
  if (!$field) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $bundle,
      'label' => $config['label'],
      'required' => $config['required'] ?? FALSE,
      'settings' => $config['settings'] ?? [],
    ]);
    $field->save();
  }

  // Set up form display.
  $form_display = EntityFormDisplay::load($entity_type . '.' . $bundle . '.default');
  if ($form_display && !$form_display->getComponent($field_name)) {
    $form_display->setComponent($field_name, [
      'type' => ai_dashboard_get_widget_type($config['field_type']),
      'weight' => 10,
    ])->save();
  }

  // Set up view display.
  $view_display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.default');
  if ($view_display && !$view_display->getComponent($field_name)) {
    $view_display->setComponent($field_name, [
      'type' => ai_dashboard_get_formatter_type($config['field_type']),
      'weight' => 10,
    ])->save();
  }
}

/**
 * Get appropriate widget type for field type.
 */
function ai_dashboard_get_widget_type($field_type) {
  $widget_map = [
    'string' => 'string_textfield',
    'text' => 'text_textarea',
    'integer' => 'number',
    'decimal' => 'number',
    'email' => 'email_default',
    'link' => 'link_default',
    'datetime' => 'datetime_default',
    'list_string' => 'options_select',
    'entity_reference' => 'entity_reference_autocomplete',
  ];

  return $widget_map[$field_type] ?? 'string_textfield';
}

/**
 * Get appropriate formatter type for field type.
 */
function ai_dashboard_get_formatter_type($field_type) {
  $formatter_map = [
    'string' => 'string',
    'text' => 'text_default',
    'integer' => 'number_integer',
    'decimal' => 'number_decimal',
    'email' => 'basic_string',
    'link' => 'link',
    'datetime' => 'datetime_default',
    'list_string' => 'list_default',
    'entity_reference' => 'entity_reference_label',
  ];

  return $formatter_map[$field_type] ?? 'string';
}

/**
 * Remove unsupported status filters.
 */
function ai_dashboard_update_8001() {
  $config_factory = \Drupal::configFactory();

  // Update field storage configuration.
  $field_storage_config = $config_factory->getEditable('field.storage.node.field_import_status_filter');
  if ($field_storage_config && !$field_storage_config->isNew()) {
    $allowed_values = $field_storage_config->get('settings.allowed_values');

    // Remove unsupported status values.
    // Need review (maintainer), Needs tests, Needs clarification.
    $unsupported_values = ['7', '17', '5'];
    $updated_values = [];

    foreach ($allowed_values as $value) {
      if (!in_array($value['value'], $unsupported_values)) {
        $updated_values[] = $value;
      }
    }

    $field_storage_config->set('settings.allowed_values', $updated_values);
    $field_storage_config->save();
  }

  // Update existing ai_import_config nodes to remove unsupported status values.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $query = $node_storage->getQuery()
    ->condition('type', 'ai_import_config')
    ->accessCheck(FALSE);

  $nids = $query->execute();

  if (!empty($nids)) {
    $nodes = $node_storage->loadMultiple($nids);
    $unsupported_values = ['7', '17', '5'];

    foreach ($nodes as $node) {
      if ($node->hasField('field_import_status_filter') && !$node->get('field_import_status_filter')->isEmpty()) {
        $updated_values = [];
        $has_changes = FALSE;

        foreach ($node->get('field_import_status_filter') as $item) {
          if (!in_array($item->value, $unsupported_values)) {
            $updated_values[] = ['value' => $item->value];
          }
          else {
            $has_changes = TRUE;
          }
        }

        if ($has_changes) {
          $node->set('field_import_status_filter', $updated_values);
          $node->save();
        }
      }
    }
  }

  // Clear field and form caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

  // Clear all caches to ensure the changes take effect.
  drupal_flush_all_caches();

  return t('Removed unsupported status filters: Need review (maintainer), Needs tests, Needs clarification from field storage and existing configurations.');
}

/**
 * Add drupal.org profile and AI maker fields to companies.
 */
function ai_dashboard_update_8002() {
  $config_path = \Drupal::service('extension.list.module')->getPath('ai_dashboard') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Install new field storages.
  $field_storages = [
    'field.storage.node.field_company_drupal_profile',
    'field.storage.node.field_company_ai_maker',
  ];

  foreach ($field_storages as $field_storage_name) {
    if ($source->exists($field_storage_name)) {
      $config_storage->write($field_storage_name, $source->read($field_storage_name));
    }
  }

  // Install new field instances.
  $field_instances = [
    'field.field.node.ai_company.field_company_drupal_profile',
    'field.field.node.ai_company.field_company_ai_maker',
  ];

  foreach ($field_instances as $field_instance_name) {
    if ($source->exists($field_instance_name)) {
      $config_storage->write($field_instance_name, $source->read($field_instance_name));
    }
  }

  // Update form and view displays.
  $displays = [
    'core.entity_form_display.node.ai_company.default',
    'core.entity_view_display.node.ai_company.default',
  ];

  foreach ($displays as $display_name) {
    if ($source->exists($display_name)) {
      $config_storage->write($display_name, $source->read($display_name));
    }
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Added drupal.org profile and AI maker fields to companies.');
}

/**
 * Update AI contributors admin view to include drupal.org username with links.
 */
function ai_dashboard_update_8003() {
  $config_path = \Drupal::service('extension.list.module')->getPath('ai_dashboard') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Update the contributors admin view.
  $view_config_name = 'views.view.ai_contributors_admin';
  if ($source->exists($view_config_name)) {
    $config_storage->write($view_config_name, $source->read($view_config_name));
  }

  // Clear views cache.
  if (\Drupal::hasService('views.views_data')) {
    \Drupal::service('views.views_data')->clear();
  }

  return t('Updated AI contributors admin view to include drupal.org username column with profile links.');
}

/**
 * Fix missing field storage tables for company fields.
 */
function ai_dashboard_update_8004() {
  // Ensure field storages are properly created in the database.
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create field_company_ai_maker storage if missing.
  $ai_maker_storage = $field_storage_manager->load('node.field_company_ai_maker');
  if (!$ai_maker_storage) {
    $ai_maker_storage = $field_storage_manager->create([
      'field_name' => 'field_company_ai_maker',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => [],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => TRUE,
    ]);
    $ai_maker_storage->save();
  }

  // Create field_company_drupal_profile storage if missing.
  $drupal_profile_storage = $field_storage_manager->load('node.field_company_drupal_profile');
  if (!$drupal_profile_storage) {
    $drupal_profile_storage = $field_storage_manager->create([
      'field_name' => 'field_company_drupal_profile',
      'entity_type' => 'node',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'case_sensitive' => FALSE,
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => TRUE,
    ]);
    $drupal_profile_storage->save();
  }

  // Create field instances for ai_company bundle.
  $ai_maker_field = $field_manager->load('node.ai_company.field_company_ai_maker');
  if (!$ai_maker_field) {
    $ai_maker_field = $field_manager->create([
      'field_name' => 'field_company_ai_maker',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'label' => 'AI Maker',
      'required' => FALSE,
      'settings' => [
        'on_label' => 'Yes',
        'off_label' => 'No',
      ],
      'default_value' => [['value' => 0]],
    ]);
    $ai_maker_field->save();
  }

  $drupal_profile_field = $field_manager->load('node.ai_company.field_company_drupal_profile');
  if (!$drupal_profile_field) {
    $drupal_profile_field = $field_manager->create([
      'field_name' => 'field_company_drupal_profile',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'label' => 'Drupal.org Profile',
      'description' => 'Enter the company name as it appears in drupal.org URLs (e.g., "acquia" for drupal.org/acquia)',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $drupal_profile_field->save();
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

  return t('Fixed missing field storage tables for company AI maker and Drupal profile fields.');
}

/**
 * Force creation of database tables for company fields.
 */
function ai_dashboard_update_8005() {
  $database = \Drupal::database();
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');

  // Load field storage configs directly.
  $ai_maker_storage = $field_storage_manager->load('node.field_company_ai_maker');
  $drupal_profile_storage = $field_storage_manager->load('node.field_company_drupal_profile');

  // Create AI maker field tables using proper schema structure.
  if ($ai_maker_storage && !$database->schema()->tableExists('node__field_company_ai_maker')) {
    $table_name = 'node__field_company_ai_maker';
    $revision_table_name = 'node_revision__field_company_ai_maker';

    // Main table schema for boolean field.
    $main_table_schema = [
      'description' => 'Data storage for node field field_company_ai_maker.',
      'fields' => [
        'bundle' => [
          'type' => 'varchar_ascii',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance',
        ],
        'deleted' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'A boolean indicating whether this data item has been deleted',
        ],
        'entity_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity id this data is attached to',
        ],
        'revision_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity revision id this data is attached to',
        ],
        'langcode' => [
          'type' => 'varchar_ascii',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The language code for this data item.',
        ],
        'delta' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The sequence number for this data item, used for multi-value fields',
        ],
        'field_company_ai_maker_value' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'description' => 'The boolean value.',
        ],
      ],
      'primary key' => ['entity_id', 'deleted', 'delta', 'langcode'],
      'indexes' => [
        'bundle' => ['bundle'],
        'revision_id' => ['revision_id'],
        'field_company_ai_maker_value' => ['field_company_ai_maker_value'],
      ],
    ];

    // Revision table schema.
    $revision_table_schema = $main_table_schema;
    $revision_table_schema['description'] = 'Revision archive storage for node field field_company_ai_maker.';
    $revision_table_schema['primary key'] = ['entity_id', 'revision_id', 'deleted', 'delta', 'langcode'];
    $revision_table_schema['indexes']['entity_id'] = ['entity_id'];

    $database->schema()->createTable($table_name, $main_table_schema);
    $database->schema()->createTable($revision_table_name, $revision_table_schema);
  }

  // Create Drupal profile field tables.
  if ($drupal_profile_storage && !$database->schema()->tableExists('node__field_company_drupal_profile')) {
    $table_name = 'node__field_company_drupal_profile';
    $revision_table_name = 'node_revision__field_company_drupal_profile';

    // Main table schema for string field.
    $main_table_schema = [
      'description' => 'Data storage for node field field_company_drupal_profile.',
      'fields' => [
        'bundle' => [
          'type' => 'varchar_ascii',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance',
        ],
        'deleted' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'A boolean indicating whether this data item has been deleted',
        ],
        'entity_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity id this data is attached to',
        ],
        'revision_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity revision id this data is attached to',
        ],
        'langcode' => [
          'type' => 'varchar_ascii',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The language code for this data item.',
        ],
        'delta' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The sequence number for this data item, used for multi-value fields',
        ],
        'field_company_drupal_profile_value' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
          'description' => 'The text value.',
        ],
      ],
      'primary key' => ['entity_id', 'deleted', 'delta', 'langcode'],
      'indexes' => [
        'bundle' => ['bundle'],
        'revision_id' => ['revision_id'],
      ],
    ];

    // Revision table schema.
    $revision_table_schema = $main_table_schema;
    $revision_table_schema['description'] = 'Revision archive storage for node field field_company_drupal_profile.';
    $revision_table_schema['primary key'] = ['entity_id', 'revision_id', 'deleted', 'delta', 'langcode'];
    $revision_table_schema['indexes']['entity_id'] = ['entity_id'];

    $database->schema()->createTable($table_name, $main_table_schema);
    $database->schema()->createTable($revision_table_name, $revision_table_schema);
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Force created database tables for company AI maker and Drupal profile fields.');
}

/**
 * Add tracker role and GitLab username fields to contributors.
 */
function ai_dashboard_update_8006() {
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create tracker_role field storage (multi-value list)
  $tracker_role_storage = $field_storage_manager->load('node.field_tracker_role');
  if (!$tracker_role_storage) {
    $tracker_role_storage = $field_storage_manager->create([
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'developer' => 'Developer',
          'frontend' => 'Front-end',
          'management' => 'Management',
          'designer' => 'Designer',
          'qa' => 'QA/Testing',
          'devops' => 'DevOps',
          'pm' => 'Project Manager',
        ],
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => -1,
      'translatable' => FALSE,
    ]);
    $tracker_role_storage->save();
  }

  // Create gitlab_username field storage.
  $gitlab_storage = $field_storage_manager->load('node.field_gitlab_username');
  if (!$gitlab_storage) {
    $gitlab_storage = $field_storage_manager->create([
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'case_sensitive' => FALSE,
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => FALSE,
    ]);
    $gitlab_storage->save();
  }

  // Create field instances for ai_contributor bundle.
  $tracker_role_field = $field_manager->load('node.ai_contributor.field_tracker_role');
  if (!$tracker_role_field) {
    $tracker_role_field = $field_manager->create([
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'label' => 'Tracker Role',
      'description' => 'Select one or more roles for filtering purposes',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $tracker_role_field->save();
  }

  $gitlab_field = $field_manager->load('node.ai_contributor.field_gitlab_username');
  if (!$gitlab_field) {
    $gitlab_field = $field_manager->create([
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'label' => 'GitLab Username/Email',
      'description' => 'GitLab username or email address',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $gitlab_field->save();
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Added tracker role and GitLab username fields to contributors.');
}
