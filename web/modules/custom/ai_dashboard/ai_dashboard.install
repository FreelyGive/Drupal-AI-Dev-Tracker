<?php

/**
 * @file
 * Install, update and uninstall functions for AI Dashboard module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Display\EntityViewDisplay;
use Drupal\Core\Entity\Display\EntityFormDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 */
function ai_dashboard_install() {
  // Create content types and fields programmatically.
  ai_dashboard_create_content_types();
  // Fields will be created via configuration files instead.
}

/**
 * Create content types for the AI Dashboard.
 */
function ai_dashboard_create_content_types() {
  $types = [
    'ai_company' => [
      'name' => 'AI Company',
      'description' => 'Companies that contribute to AI modules',
    ],
    'ai_contributor' => [
      'name' => 'AI Contributor',
      'description' => 'Individual contributors to AI modules',
    ],
    'ai_module' => [
      'name' => 'AI Module',
      'description' => 'AI and related modules being tracked',
    ],
    'ai_issue' => [
      'name' => 'AI Issue',
      'description' => 'Drupal.org issues for AI modules',
    ],
    'ai_resource_allocation' => [
      'name' => 'AI Resource Allocation',
      'description' => 'Weekly resource commitments by contributors',
    ],
  ];

  foreach ($types as $type_id => $type_info) {
    // Check if content type already exists (e.g., created in tests)
    $existing_type = NodeType::load($type_id);
    if (!$existing_type) {
      $type = NodeType::create([
        'type' => $type_id,
        'name' => $type_info['name'],
        'description' => $type_info['description'],
        'new_revision' => TRUE,
        'preview_mode' => DRUPAL_OPTIONAL,
        'display_submitted' => FALSE,
      ]);
      $type->save();
    }
  }
}

/**
 * Create fields for the AI Dashboard content types.
 */
function ai_dashboard_create_fields() {
  $field_configs = ai_dashboard_get_field_configs();

  foreach ($field_configs as $config) {
    ai_dashboard_create_field($config);
  }
}

/**
 * Get field configurations for all content types.
 */
function ai_dashboard_get_field_configs() {
  return [
    // AI Company fields.
    [
      'field_name' => 'field_company_website',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'field_type' => 'link',
      'label' => 'Website',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_company_size',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'field_type' => 'list_string',
      'label' => 'Company Size',
      'required' => FALSE,
      'settings' => [
        'allowed_values' => [
          'startup' => 'Startup (1-10)',
          'small' => 'Small (11-50)',
          'medium' => 'Medium (51-200)',
          'large' => 'Large (201-1000)',
          'enterprise' => 'Enterprise (1000+)',
        ],
      ],
    ],

    // AI Contributor fields.
    [
      'field_name' => 'field_drupal_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'Drupal.org Username',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_contributor_company',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'entity_reference',
      'label' => 'Company',
      'required' => FALSE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_company'],
        ],
      ],
    ],
    [
      'field_name' => 'field_contributor_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'Role/Title',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'list_string',
      'label' => 'Tracker Role',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'allowed_values' => [
          'developer' => 'Developer',
          'frontend' => 'Front-end',
          'management' => 'Management',
          'designer' => 'Designer',
          'qa' => 'QA/Testing',
          'devops' => 'DevOps',
          'pm' => 'Project Manager',
        ],
      ],
    ],
    [
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'string',
      'label' => 'GitLab Username/Email',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_contributor_email',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'field_type' => 'email',
      'label' => 'Email',
      'required' => FALSE,
    ],

    // AI Module fields.
    [
      'field_name' => 'field_module_machine_name',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'string',
      'label' => 'Machine Name',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_module_project_url',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'link',
      'label' => 'Drupal.org Project URL',
      'required' => FALSE,
    ],
    [
      'field_name' => 'field_module_category',
      'entity_type' => 'node',
      'bundle' => 'ai_module',
      'field_type' => 'list_string',
      'label' => 'Category',
      'required' => FALSE,
      'settings' => [
        'allowed_values' => [
          'core_ai' => 'Core AI',
          'provider' => 'AI Provider',
          'integration' => 'AI Integration',
          'utility' => 'AI Utility',
          'related' => 'Related Module',
        ],
      ],
    ],

    // AI Issue fields.
    [
      'field_name' => 'field_issue_number',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'integer',
      'label' => 'Issue Number',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_issue_url',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'link',
      'label' => 'Issue URL',
      'required' => TRUE,
    ],
    [
      'field_name' => 'field_issue_module',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'entity_reference',
      'label' => 'Module',
      'required' => TRUE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_module'],
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_assignees',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'entity_reference',
      'label' => 'Assignees',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_contributor'],
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_status',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'list_string',
      'label' => 'Status',
      'required' => TRUE,
      'settings' => [
        'allowed_values' => [
          'active' => 'Active',
          'needs_review' => 'Needs Review',
          'needs_work' => 'Needs Work',
          'rtbc' => 'Reviewed & Tested by the Community',
          'fixed' => 'Fixed',
          'closed_duplicate' => 'Closed (Duplicate)',
          'closed_outdated' => 'Closed (Outdated)',
          'closed_wontfix' => 'Closed (Won\'t Fix)',
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_priority',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'list_string',
      'label' => 'Priority',
      'required' => TRUE,
      'settings' => [
        'allowed_values' => [
          'critical' => 'Critical',
          'major' => 'Major',
          'normal' => 'Normal',
          'minor' => 'Minor',
        ],
      ],
    ],
    [
      'field_name' => 'field_issue_tags',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'field_type' => 'string',
      'label' => 'Tags',
      'required' => FALSE,
      'cardinality' => -1,
    ],

    // AI Resource Allocation fields.
    [
      'field_name' => 'field_allocation_contributor',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'entity_reference',
      'label' => 'Contributor',
      'required' => TRUE,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_contributor'],
        ],
      ],
    ],
    [
      'field_name' => 'field_allocation_week',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'datetime',
      'label' => 'Week Starting',
      'required' => TRUE,
      'settings' => [
        'datetime_type' => 'date',
      ],
    ],
    [
      'field_name' => 'field_allocation_days',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'decimal',
      'label' => 'Days Allocated',
      'required' => TRUE,
      'settings' => [
        'precision' => 3,
        'scale' => 1,
        'min' => 0,
        'max' => 7,
      ],
    ],
    [
      'field_name' => 'field_allocation_issues',
      'entity_type' => 'node',
      'bundle' => 'ai_resource_allocation',
      'field_type' => 'entity_reference',
      'label' => 'Related Issues',
      'required' => FALSE,
      'cardinality' => -1,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' => ['ai_issue'],
        ],
      ],
    ],
  ];
}

/**
 * Create a field based on configuration.
 */
function ai_dashboard_create_field($config) {
  $field_name = $config['field_name'];
  $entity_type = $config['entity_type'];
  $bundle = $config['bundle'];

  // Create field storage if it doesn't exist.
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'type' => $config['field_type'],
      'cardinality' => $config['cardinality'] ?? 1,
      'settings' => $config['settings'] ?? [],
    ]);
    $field_storage->save();
  }

  // Create field instance.
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
  if (!$field) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $bundle,
      'label' => $config['label'],
      'required' => $config['required'] ?? FALSE,
      'settings' => $config['settings'] ?? [],
    ]);
    $field->save();
  }

  // Set up form display.
  $form_display = EntityFormDisplay::load($entity_type . '.' . $bundle . '.default');
  if ($form_display && !$form_display->getComponent($field_name)) {
    $form_display->setComponent($field_name, [
      'type' => ai_dashboard_get_widget_type($config['field_type']),
      'weight' => 10,
    ])->save();
  }

  // Set up view display.
  $view_display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.default');
  if ($view_display && !$view_display->getComponent($field_name)) {
    $view_display->setComponent($field_name, [
      'type' => ai_dashboard_get_formatter_type($config['field_type']),
      'weight' => 10,
    ])->save();
  }
}

/**
 * Get appropriate widget type for field type.
 */
function ai_dashboard_get_widget_type($field_type) {
  $widget_map = [
    'string' => 'string_textfield',
    'text' => 'text_textarea',
    'integer' => 'number',
    'decimal' => 'number',
    'email' => 'email_default',
    'link' => 'link_default',
    'datetime' => 'datetime_default',
    'list_string' => 'options_select',
    'entity_reference' => 'entity_reference_autocomplete',
  ];

  return $widget_map[$field_type] ?? 'string_textfield';
}

/**
 * Get appropriate formatter type for field type.
 */
function ai_dashboard_get_formatter_type($field_type) {
  $formatter_map = [
    'string' => 'string',
    'text' => 'text_default',
    'integer' => 'number_integer',
    'decimal' => 'number_decimal',
    'email' => 'basic_string',
    'link' => 'link',
    'datetime' => 'datetime_default',
    'list_string' => 'list_default',
    'entity_reference' => 'entity_reference_label',
  ];

  return $formatter_map[$field_type] ?? 'string';
}

/**
 * Remove unsupported status filters.
 */
function ai_dashboard_update_8001() {
  $config_factory = \Drupal::configFactory();

  // Update field storage configuration.
  $field_storage_config = $config_factory->getEditable('field.storage.node.field_import_status_filter');
  if ($field_storage_config && !$field_storage_config->isNew()) {
    $allowed_values = $field_storage_config->get('settings.allowed_values');

    // Remove unsupported status values.
    // Need review (maintainer), Needs tests, Needs clarification.
    $unsupported_values = ['7', '17', '5'];
    $updated_values = [];

    foreach ($allowed_values as $value) {
      if (!in_array($value['value'], $unsupported_values)) {
        $updated_values[] = $value;
      }
    }

    $field_storage_config->set('settings.allowed_values', $updated_values);
    $field_storage_config->save();
  }

  // Update existing ai_import_config nodes to remove unsupported status values.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $query = $node_storage->getQuery()
    ->condition('type', 'ai_import_config')
    ->accessCheck(FALSE);

  $nids = $query->execute();

  if (!empty($nids)) {
    $nodes = $node_storage->loadMultiple($nids);
    $unsupported_values = ['7', '17', '5'];

    foreach ($nodes as $node) {
      if ($node->hasField('field_import_status_filter') && !$node->get('field_import_status_filter')->isEmpty()) {
        $updated_values = [];
        $has_changes = FALSE;

        foreach ($node->get('field_import_status_filter') as $item) {
          if (!in_array($item->value, $unsupported_values)) {
            $updated_values[] = ['value' => $item->value];
          }
          else {
            $has_changes = TRUE;
          }
        }

        if ($has_changes) {
          $node->set('field_import_status_filter', $updated_values);
          $node->save();
        }
      }
    }
  }

  // Clear field and form caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

  // Clear all caches to ensure the changes take effect.
  drupal_flush_all_caches();

  return t('Removed unsupported status filters: Need review (maintainer), Needs tests, Needs clarification from field storage and existing configurations.');
}

/**
 * Add drupal.org profile and AI maker fields to companies.
 */
function ai_dashboard_update_8002() {
  $config_path = \Drupal::service('extension.list.module')->getPath('ai_dashboard') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Install new field storages.
  $field_storages = [
    'field.storage.node.field_company_drupal_profile',
    'field.storage.node.field_company_ai_maker',
  ];

  foreach ($field_storages as $field_storage_name) {
    if ($source->exists($field_storage_name)) {
      $config_storage->write($field_storage_name, $source->read($field_storage_name));
    }
  }

  // Install new field instances.
  $field_instances = [
    'field.field.node.ai_company.field_company_drupal_profile',
    'field.field.node.ai_company.field_company_ai_maker',
  ];

  foreach ($field_instances as $field_instance_name) {
    if ($source->exists($field_instance_name)) {
      $config_storage->write($field_instance_name, $source->read($field_instance_name));
    }
  }

  // Update form and view displays.
  $displays = [
    'core.entity_form_display.node.ai_company.default',
    'core.entity_view_display.node.ai_company.default',
  ];

  foreach ($displays as $display_name) {
    if ($source->exists($display_name)) {
      $config_storage->write($display_name, $source->read($display_name));
    }
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Added drupal.org profile and AI maker fields to companies.');
}

/**
 * Update AI contributors admin view to include drupal.org username with links.
 */
function ai_dashboard_update_8003() {
  $config_path = \Drupal::service('extension.list.module')->getPath('ai_dashboard') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  // Update the contributors admin view.
  $view_config_name = 'views.view.ai_contributors_admin';
  if ($source->exists($view_config_name)) {
    $config_storage->write($view_config_name, $source->read($view_config_name));
  }

  // Clear views cache.
  if (\Drupal::hasService('views.views_data')) {
    \Drupal::service('views.views_data')->clear();
  }

  return t('Updated AI contributors admin view to include drupal.org username column with profile links.');
}

/**
 * Fix missing field storage tables for company fields.
 */
function ai_dashboard_update_8004() {
  // Ensure field storages are properly created in the database.
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create field_company_ai_maker storage if missing.
  $ai_maker_storage = $field_storage_manager->load('node.field_company_ai_maker');
  if (!$ai_maker_storage) {
    $ai_maker_storage = $field_storage_manager->create([
      'field_name' => 'field_company_ai_maker',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => [],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => TRUE,
    ]);
    $ai_maker_storage->save();
  }

  // Create field_company_drupal_profile storage if missing.
  $drupal_profile_storage = $field_storage_manager->load('node.field_company_drupal_profile');
  if (!$drupal_profile_storage) {
    $drupal_profile_storage = $field_storage_manager->create([
      'field_name' => 'field_company_drupal_profile',
      'entity_type' => 'node',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'case_sensitive' => FALSE,
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => TRUE,
    ]);
    $drupal_profile_storage->save();
  }

  // Create field instances for ai_company bundle.
  $ai_maker_field = $field_manager->load('node.ai_company.field_company_ai_maker');
  if (!$ai_maker_field) {
    $ai_maker_field = $field_manager->create([
      'field_name' => 'field_company_ai_maker',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'label' => 'AI Maker',
      'required' => FALSE,
      'settings' => [
        'on_label' => 'Yes',
        'off_label' => 'No',
      ],
      'default_value' => [['value' => 0]],
    ]);
    $ai_maker_field->save();
  }

  $drupal_profile_field = $field_manager->load('node.ai_company.field_company_drupal_profile');
  if (!$drupal_profile_field) {
    $drupal_profile_field = $field_manager->create([
      'field_name' => 'field_company_drupal_profile',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'label' => 'Drupal.org Profile',
      'description' => 'Enter the company name as it appears in drupal.org URLs (e.g., "acquia" for drupal.org/acquia)',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $drupal_profile_field->save();
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

  return t('Fixed missing field storage tables for company AI maker and Drupal profile fields.');
}

/**
 * Force creation of database tables for company fields.
 */
function ai_dashboard_update_8005() {
  $database = \Drupal::database();
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');

  // Load field storage configs directly.
  $ai_maker_storage = $field_storage_manager->load('node.field_company_ai_maker');
  $drupal_profile_storage = $field_storage_manager->load('node.field_company_drupal_profile');

  // Create AI maker field tables using proper schema structure.
  if ($ai_maker_storage && !$database->schema()->tableExists('node__field_company_ai_maker')) {
    $table_name = 'node__field_company_ai_maker';
    $revision_table_name = 'node_revision__field_company_ai_maker';

    // Main table schema for boolean field.
    $main_table_schema = [
      'description' => 'Data storage for node field field_company_ai_maker.',
      'fields' => [
        'bundle' => [
          'type' => 'varchar_ascii',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance',
        ],
        'deleted' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'A boolean indicating whether this data item has been deleted',
        ],
        'entity_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity id this data is attached to',
        ],
        'revision_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity revision id this data is attached to',
        ],
        'langcode' => [
          'type' => 'varchar_ascii',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The language code for this data item.',
        ],
        'delta' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The sequence number for this data item, used for multi-value fields',
        ],
        'field_company_ai_maker_value' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'description' => 'The boolean value.',
        ],
      ],
      'primary key' => ['entity_id', 'deleted', 'delta', 'langcode'],
      'indexes' => [
        'bundle' => ['bundle'],
        'revision_id' => ['revision_id'],
        'field_company_ai_maker_value' => ['field_company_ai_maker_value'],
      ],
    ];

    // Revision table schema.
    $revision_table_schema = $main_table_schema;
    $revision_table_schema['description'] = 'Revision archive storage for node field field_company_ai_maker.';
    $revision_table_schema['primary key'] = ['entity_id', 'revision_id', 'deleted', 'delta', 'langcode'];
    $revision_table_schema['indexes']['entity_id'] = ['entity_id'];

    $database->schema()->createTable($table_name, $main_table_schema);
    $database->schema()->createTable($revision_table_name, $revision_table_schema);
  }

  // Create Drupal profile field tables.
  if ($drupal_profile_storage && !$database->schema()->tableExists('node__field_company_drupal_profile')) {
    $table_name = 'node__field_company_drupal_profile';
    $revision_table_name = 'node_revision__field_company_drupal_profile';

    // Main table schema for string field.
    $main_table_schema = [
      'description' => 'Data storage for node field field_company_drupal_profile.',
      'fields' => [
        'bundle' => [
          'type' => 'varchar_ascii',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance',
        ],
        'deleted' => [
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'A boolean indicating whether this data item has been deleted',
        ],
        'entity_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity id this data is attached to',
        ],
        'revision_id' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The entity revision id this data is attached to',
        ],
        'langcode' => [
          'type' => 'varchar_ascii',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
          'description' => 'The language code for this data item.',
        ],
        'delta' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'The sequence number for this data item, used for multi-value fields',
        ],
        'field_company_drupal_profile_value' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
          'description' => 'The text value.',
        ],
      ],
      'primary key' => ['entity_id', 'deleted', 'delta', 'langcode'],
      'indexes' => [
        'bundle' => ['bundle'],
        'revision_id' => ['revision_id'],
      ],
    ];

    // Revision table schema.
    $revision_table_schema = $main_table_schema;
    $revision_table_schema['description'] = 'Revision archive storage for node field field_company_drupal_profile.';
    $revision_table_schema['primary key'] = ['entity_id', 'revision_id', 'deleted', 'delta', 'langcode'];
    $revision_table_schema['indexes']['entity_id'] = ['entity_id'];

    $database->schema()->createTable($table_name, $main_table_schema);
    $database->schema()->createTable($revision_table_name, $revision_table_schema);
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Force created database tables for company AI maker and Drupal profile fields.');
}

/**
 * Add tracker role and GitLab username fields to contributors.
 */
function ai_dashboard_update_8006() {
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create tracker_role field storage (multi-value list)
  $tracker_role_storage = $field_storage_manager->load('node.field_tracker_role');
  if (!$tracker_role_storage) {
    $tracker_role_storage = $field_storage_manager->create([
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'developer' => 'Developer',
          'frontend' => 'Front-end',
          'management' => 'Management',
          'designer' => 'Designer',
          'qa' => 'QA/Testing',
          'devops' => 'DevOps',
          'pm' => 'Project Manager',
        ],
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => -1,
      'translatable' => FALSE,
    ]);
    $tracker_role_storage->save();
  }

  // Create gitlab_username field storage.
  $gitlab_storage = $field_storage_manager->load('node.field_gitlab_username');
  if (!$gitlab_storage) {
    $gitlab_storage = $field_storage_manager->create([
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
        'case_sensitive' => FALSE,
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => FALSE,
    ]);
    $gitlab_storage->save();
  }

  // Create field instances for ai_contributor bundle.
  $tracker_role_field = $field_manager->load('node.ai_contributor.field_tracker_role');
  if (!$tracker_role_field) {
    $tracker_role_field = $field_manager->create([
      'field_name' => 'field_tracker_role',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'label' => 'Tracker Role',
      'description' => 'Select one or more roles for filtering purposes',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $tracker_role_field->save();
  }

  $gitlab_field = $field_manager->load('node.ai_contributor.field_gitlab_username');
  if (!$gitlab_field) {
    $gitlab_field = $field_manager->create([
      'field_name' => 'field_gitlab_username',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'label' => 'GitLab Username/Email',
      'description' => 'GitLab username or email address',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [],
    ]);
    $gitlab_field->save();
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Added tracker role and GitLab username fields to contributors.');
}

/**
 * Add Dashboard Category field to AI Issues (developer/non-developer).
 */
function ai_dashboard_update_8008() {
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create field storage for list_string with allowed values dev/non_dev.
  $storage = $field_storage_manager->load('node.field_issue_dashboard_category');
  if (!$storage) {
    $storage = $field_storage_manager->create([
      'field_name' => 'field_issue_dashboard_category',
      'entity_type' => 'node',
      'type' => 'list_string',
      'settings' => [
        // For entity create(), allowed_values expects an associative map.
        'allowed_values' => [
          'dev' => 'Developer',
          'non_dev' => 'Non-Developer',
        ],
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => 1,
      'translatable' => TRUE,
    ]);
    $storage->save();
  }

  // Create field instance on ai_issue bundle with default 'dev'.
  $field = $field_manager->load('node.ai_issue.field_issue_dashboard_category');
  if (!$field) {
    $field = $field_manager->create([
      'field_storage' => $storage,
      'bundle' => 'ai_issue',
      'label' => 'Dashboard Category',
      'required' => FALSE,
      'default_value' => [['value' => 'dev']],
      'settings' => [],
    ]);
    $field->save();
  }

  // Add to form and view displays if not already present.
  $form_display = \Drupal\Core\Entity\Display\EntityFormDisplay::load('node.ai_issue.default');
  if ($form_display && !$form_display->getComponent('field_issue_dashboard_category')) {
    $form_display->setComponent('field_issue_dashboard_category', [
      'type' => 'options_select',
      'weight' => 9,
    ])->save();
  }

  $view_display = \Drupal\Core\Entity\Display\EntityViewDisplay::load('node.ai_issue.default');
  if ($view_display && !$view_display->getComponent('field_issue_dashboard_category')) {
    $view_display->setComponent('field_issue_dashboard_category', [
      'type' => 'list_default',
      'weight' => 9,
    ])->save();
  }

  // Clear field caches to register definitions.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

  return t('Added Dashboard Category field to AI Issues with default Developer.');
}

/**
 * Ensure Dashboard Category appears on AI Issue form/view displays.
 */
function ai_dashboard_update_8009() {
  // Add to form display if missing.
  if ($form_display = \Drupal\Core\Entity\Display\EntityFormDisplay::load('node.ai_issue.default')) {
    if (!$form_display->getComponent('field_issue_dashboard_category')) {
      $form_display->setComponent('field_issue_dashboard_category', [
        'type' => 'options_select',
        'weight' => 6,
      ])->save();
    }
  }

  // Add to view display if missing.
  if ($view_display = \Drupal\Core\Entity\Display\EntityViewDisplay::load('node.ai_issue.default')) {
    if (!$view_display->getComponent('field_issue_dashboard_category')) {
      $view_display->setComponent('field_issue_dashboard_category', [
        'type' => 'list_default',
        'weight' => 6,
      ])->save();
    }
  }

  // Clear caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Ensured Dashboard Category field is visible on AI Issue forms and views.');
}

/**
 * Add non-developer flags to contributors and issues.
 */
function ai_dashboard_update_8007() {
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Contributor flag: field_non_developer (boolean).
  $c_storage = $field_storage_manager->load('node.field_non_developer');
  if (!$c_storage) {
    $c_storage = $field_storage_manager->create([
      'field_name' => 'field_non_developer',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => [
        'on_label' => 'Yes',
        'off_label' => 'No',
      ],
      'cardinality' => 1,
      'translatable' => FALSE,
    ]);
    $c_storage->save();
  }
  $c_field = $field_manager->load('node.ai_contributor.field_non_developer');
  if (!$c_field) {
    $c_field = $field_manager->create([
      'field_name' => 'field_non_developer',
      'entity_type' => 'node',
      'bundle' => 'ai_contributor',
      'label' => 'Non-developer',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [['value' => 0]],
    ]);
    $c_field->save();
  }

  // Issue flag: field_issue_non_developer (boolean).
  $i_storage = $field_storage_manager->load('node.field_issue_non_developer');
  if (!$i_storage) {
    $i_storage = $field_storage_manager->create([
      'field_name' => 'field_issue_non_developer',
      'entity_type' => 'node',
      'type' => 'boolean',
      'settings' => [
        'on_label' => 'Yes',
        'off_label' => 'No',
      ],
      'cardinality' => 1,
      'translatable' => FALSE,
    ]);
    $i_storage->save();
  }
  $i_field = $field_manager->load('node.ai_issue.field_issue_non_developer');
  if (!$i_field) {
    $i_field = $field_manager->create([
      'field_name' => 'field_issue_non_developer',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'label' => 'Non-developer Issue',
      'required' => FALSE,
      'settings' => [],
      'default_value' => [['value' => 0]],
    ]);
    $i_field->save();
  }

  // Clear field caches.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Added non-developer flags to contributors and issues.');
}

/**
 * Migrate ai_import_config nodes to module_import configuration entities.
 */
function ai_dashboard_update_9001() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');
  $module_import_storage = $entity_type_manager->getStorage('module_import');
  $messenger = \Drupal::messenger();
  $logger = \Drupal::logger('ai_dashboard');

  // Load all ai_import_config nodes.
  $query = $node_storage->getQuery()
    ->condition('type', 'ai_import_config')
    ->accessCheck(FALSE);
  $nids = $query->execute();

  if (empty($nids)) {
    $messenger->addMessage(t('No AI Import Configuration nodes found to migrate.'));
    return t('No AI Import Configuration nodes found to migrate.');
  }

  $nodes = $node_storage->loadMultiple($nids);
  $migrated_count = 0;
  $failed_count = 0;

  foreach ($nodes as $node) {
    try {
      // Generate a machine name from the node title.
      $id = preg_replace('/[^a-z0-9_]+/', '_', strtolower($node->getTitle()));
      $id = preg_replace('/_+/', '_', $id);
      $id = trim($id, '_');

      // Ensure unique ID.
      $original_id = $id;
      $counter = 0;
      while ($module_import_storage->load($id)) {
        $counter++;
        $id = $original_id . '_' . $counter;
      }

      // Get field values from the node.
      $source_type = $node->hasField('field_import_source_type') && !$node->get('field_import_source_type')->isEmpty()
        ? $node->get('field_import_source_type')->first()->getValue()['value']
        : 'drupal_org';

      $project_id = $node->hasField('field_import_project_id') && !$node->get('field_import_project_id')->isEmpty()
        ? $node->get('field_import_project_id')->first()->getValue()['value']
        : '';

      // Try to resolve machine name from project_id if available.
      $project_name = '';
      if (!empty($project_id)) {
        try {
          $http_client = \Drupal::httpClient();
          $response = $http_client->request('GET', "https://www.drupal.org/api-d7/node/{$project_id}.json", [
            'timeout' => 10,
            'headers' => ['User-Agent' => 'AI Dashboard Module/1.0'],
          ]);
          
          if ($response->getStatusCode() === 200) {
            $project_data = json_decode($response->getBody()->getContents(), TRUE);
            if (isset($project_data['field_project_machine_name'])) {
              $project_name = $project_data['field_project_machine_name'];
            }
          }
        } catch (\Exception $e) {
          // Ignore errors, we'll just not have a machine name.
          $logger->warning('Could not resolve machine name for project @id: @error', [
            '@id' => $project_id,
            '@error' => $e->getMessage(),
          ]);
        }
      }

      $filter_tags = $node->hasField('field_import_filter_tags') && !$node->get('field_import_filter_tags')->isEmpty()
        ? $node->get('field_import_filter_tags')->first()->getValue()['value']
        : '';

      // Process status filter (multi-value field).
      $status_filter = [];
      if ($node->hasField('field_import_status_filter') && !$node->get('field_import_status_filter')->isEmpty()) {
        foreach ($node->get('field_import_status_filter') as $item) {
          $status_filter[] = $item->getValue()['value'];
        }
      }

      $max_issues = $node->hasField('field_import_max_issues') && !$node->get('field_import_max_issues')->isEmpty()
        ? (int) $node->get('field_import_max_issues')->first()->getValue()['value']
        : NULL;

      $date_filter = NULL;
      if ($node->hasField('field_import_date_filter') && !$node->get('field_import_date_filter')->isEmpty()) {
        $date_value = $node->get('field_import_date_filter')->first()->getValue();
        if (isset($date_value['value'])) {
          $date_filter = substr($date_value['value'], 0, 10); // Extract YYYY-MM-DD part
        }
      }

      $active = $node->hasField('field_import_active') && !$node->get('field_import_active')->isEmpty()
        ? (bool) $node->get('field_import_active')->first()->getValue()['value']
        : TRUE;

      // Create the new configuration entity.
      $module_import = $module_import_storage->create([
        'id' => $id,
        'label' => $node->getTitle(),
        'source_type' => $source_type,
        'project_id' => $project_id,
        'project_name' => $project_name,
        'filter_tags' => $filter_tags,
        'status_filter' => $status_filter,
        'max_issues' => $max_issues,
        'date_filter' => $date_filter,
        'active' => $active,
        'status' => TRUE,
      ]);

      $module_import->save();
      $migrated_count++;

      $logger->notice('Migrated AI Import Configuration node @nid to module_import entity @id', [
        '@nid' => $node->id(),
        '@id' => $id,
      ]);
    }
    catch (\Exception $e) {
      $failed_count++;
      $logger->error('Failed to migrate AI Import Configuration node @nid: @error', [
        '@nid' => $node->id(),
        '@error' => $e->getMessage(),
      ]);
    }
  }

  $messenger->addMessage(t('Migrated @migrated AI Import Configuration nodes to module_import entities. Failed: @failed', [
    '@migrated' => $migrated_count,
    '@failed' => $failed_count,
  ]));

  return t('Migrated @migrated AI Import Configuration nodes to module_import entities. Failed: @failed', [
    '@migrated' => $migrated_count,
    '@failed' => $failed_count,
  ]);
}

/**
 * Ensure Dashboard Category field exists and is on forms (post-9001 sites).
 */
function ai_dashboard_update_9002() {
  try {
    // Ensure the ai_issue bundle exists before proceeding.
    if (!\Drupal\node\Entity\NodeType::load('ai_issue')) {
      return t('AI Issue content type not found. Skipping Dashboard Category field setup.');
    }

    $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
    $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

    // 1) Ensure field storage exists.
    $storage = $field_storage_manager->load('node.field_issue_dashboard_category');
    if (!$storage) {
      $storage = $field_storage_manager->create([
        'field_name' => 'field_issue_dashboard_category',
        'entity_type' => 'node',
        'type' => 'list_string',
        'settings' => [
          'allowed_values' => [
            ['value' => 'dev', 'label' => 'Developer'],
            ['value' => 'non_dev', 'label' => 'Non-Developer'],
          ],
        ],
        'module' => 'core',
        'locked' => FALSE,
        'cardinality' => 1,
        'translatable' => TRUE,
      ]);
      $storage->save();
    }

    // 2) Ensure field instance exists on ai_issue with default 'dev'.
    $field = $field_manager->load('node.ai_issue.field_issue_dashboard_category');
    if (!$field) {
      $field = $field_manager->create([
        'field_storage' => $storage,
        'bundle' => 'ai_issue',
        'label' => 'Dashboard Category',
        'required' => FALSE,
        'default_value' => [['value' => 'dev']],
        'settings' => [],
      ]);
      $field->save();
    }

    // 3) Ensure it is present on the form display.
    if ($form_display = \Drupal\Core\Entity\Display\EntityFormDisplay::load('node.ai_issue.default')) {
      if (!$form_display->getComponent('field_issue_dashboard_category')) {
        $form_display->setComponent('field_issue_dashboard_category', [
          'type' => 'options_select',
          'weight' => 6,
        ])->save();
      }
    }

    // 4) Ensure it is present on the view display (optional).
    if ($view_display = \Drupal\Core\Entity\Display\EntityViewDisplay::load('node.ai_issue.default')) {
      if (!$view_display->getComponent('field_issue_dashboard_category')) {
        $view_display->setComponent('field_issue_dashboard_category', [
          'type' => 'list_default',
          'weight' => 6,
        ])->save();
      }
    }

    // Clear caches.
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
    \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();

    return t('Ensured Dashboard Category field exists and appears on AI Issue forms and views.');
  }
  catch (\Throwable $e) {
    \Drupal::logger('ai_dashboard')->error('Update 9002 failed: @msg', ['@msg' => $e->getMessage()]);
    // Do not abort the update process; report a message.
    return t('Dashboard Category field setup encountered an error but did not abort: @msg', ['@msg' => $e->getMessage()]);
  }
}

/**
 * Ensure Dashboard Category field exists (final pass) and is on displays.
 *
 * Some environments installed the module before the config/install definitions
 * for this field existed, and update 9002 may have been skipped due to
 * transient bundle checks. This update re-validates creation idempotently.
 */
function ai_dashboard_update_9003() {
  // Ensure the ai_issue bundle exists before proceeding.
  if (!\Drupal\node\Entity\NodeType::load('ai_issue')) {
    return t('AI Issue content type not found. Skipping Dashboard Category setup.');
  }

  $messages = [];

  // 1) Ensure field storage and field config exist by writing module config.
  $config_path = \Drupal::service('extension.list.module')->getPath('ai_dashboard') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');

  $storage_config_name = 'field.storage.node.field_issue_dashboard_category';
  if (!$config_storage->exists($storage_config_name) && $source->exists($storage_config_name)) {
    $config_storage->write($storage_config_name, $source->read($storage_config_name));
    $messages[] = 'Wrote config: ' . $storage_config_name;
  }

  $field_config_name = 'field.field.node.ai_issue.field_issue_dashboard_category';
  if (!$config_storage->exists($field_config_name) && $source->exists($field_config_name)) {
    $config_storage->write($field_config_name, $source->read($field_config_name));
    $messages[] = 'Wrote config: ' . $field_config_name;
  }

  // Clear caches for field definitions to register changes.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  return t('Ensured Dashboard Category field exists. @details', [
    '@details' => implode(' | ', $messages),
  ]);
}

/**
 * Add Dashboard Category field to AI Issue form display if missing.
 */
function ai_dashboard_update_9004() {
  // Skip if the bundle is missing.
  if (!\Drupal\node\Entity\NodeType::load('ai_issue')) {
    return t('AI Issue content type not found. Skipping form display update.');
  }

  // Ensure the field exists before adding to form display.
  if (!\Drupal\field\Entity\FieldConfig::load('node.ai_issue.field_issue_dashboard_category')) {
    return t('Dashboard Category field not found on AI Issue; nothing to add to form display.');
  }

  $config_name = 'core.entity_form_display.node.ai_issue.default';
  $storage = \Drupal::service('config.storage');
  if (!$storage->exists($config_name)) {
    return t('AI Issue default form display config not found.');
  }

  $editable = \Drupal::configFactory()->getEditable($config_name);
  $content = $editable->get('content') ?: [];
  if (!isset($content['field_issue_dashboard_category'])) {
    $content['field_issue_dashboard_category'] = [
      'type' => 'options_select',
      'weight' => 6,
      'region' => 'content',
      'settings' => [],
      'third_party_settings' => [],
    ];
    $editable->set('content', $content)->save();
    // Clear field caches so the UI reflects the new component.
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    return t('Added Dashboard Category to AI Issue form display.');
  }

  return t('Dashboard Category already present on AI Issue form display.');
}

/**
 * Make Dashboard Category on AI Issues multi-select; add Company audience field.
 */
function ai_dashboard_update_9005() {
  $messages = [];
  // 1) Update issue dashboard category to be multi-valued.
  $field_storage = \Drupal::entityTypeManager()->getStorage('field_storage_config')->load('node.field_issue_dashboard_category');
  if ($field_storage && $field_storage->getCardinality() !== -1) {
    $field_storage->setCardinality(-1)->save();
    $messages[] = 'Updated field_issue_dashboard_category cardinality to multiple.';
  }

  // 2) Add company audience field if missing.
  $fsm = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $fm = \Drupal::entityTypeManager()->getStorage('field_config');
  $storage = $fsm->load('node.field_company_audience');
  if (!$storage) {
    $storage = $fsm->create([
      'field_name' => 'field_company_audience',
      'entity_type' => 'node',
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => [
          'dev' => 'Developer',
          'non_dev' => 'Non-Developer',
        ],
      ],
      'cardinality' => -1,
      'translatable' => TRUE,
    ]);
    $storage->save();
    $messages[] = 'Created field storage for company audience.';
  }
  $field = $fm->load('node.ai_company.field_company_audience');
  if (!$field) {
    $field = $fm->create([
      'field_name' => 'field_company_audience',
      'entity_type' => 'node',
      'bundle' => 'ai_company',
      'label' => 'Audience',
      'required' => FALSE,
      'settings' => [],
    ]);
    $field->save();
    $messages[] = 'Created company audience field on ai_company.';
  }

  // 3) Ensure appears on company form display (write config directly).
  $config_name = 'core.entity_form_display.node.ai_company.default';
  $config_factory = \Drupal::configFactory();
  if (\Drupal::service('config.storage')->exists($config_name)) {
    $editable = $config_factory->getEditable($config_name);
    $content = $editable->get('content') ?: [];
    $changed = FALSE;
    if (!isset($content['field_company_audience'])) {
      $content['field_company_audience'] = [
        'type' => 'options_buttons',
        'weight' => 7,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content);
      $changed = TRUE;
    }
    $hidden = $editable->get('hidden') ?: [];
    if (isset($hidden['field_company_audience'])) {
      unset($hidden['field_company_audience']);
      $editable->set('hidden', $hidden);
      $changed = TRUE;
    }
    if ($changed) {
      $editable->save();
      $messages[] = 'Updated company form display for audience field.';
    }
  }

  // Clear caches for field definitions.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Updated dashboard category to multi-select and added company audience. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Make Contributor Type multi-select and adjust requirements.
 */
function ai_dashboard_update_9006() {
  $messages = [];
  $field_storage = \Drupal::entityTypeManager()->getStorage('field_storage_config')->load('node.field_contributor_type');
  if ($field_storage && $field_storage->getCardinality() !== -1) {
    $field_storage->setCardinality(-1)->save();
    $messages[] = 'Updated field_contributor_type cardinality to multiple.';
  }

  // Make field not required to allow saving without selection when needed.
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.ai_contributor.field_contributor_type');
  if ($field_config && $field_config->isRequired()) {
    $field_config->setRequired(FALSE)->save();
    $messages[] = 'Set contributor type field to not required.';
  }

  // Ensure contributor form display uses buttons and includes the field.
  $config_name = 'core.entity_form_display.node.ai_contributor.default';
  if (\Drupal::service('config.storage')->exists($config_name)) {
    $editable = \Drupal::configFactory()->getEditable($config_name);
    $content = $editable->get('content') ?: [];
    $changed = FALSE;
    if (!isset($content['field_contributor_type'])) {
      $content['field_contributor_type'] = [
        'type' => 'options_buttons',
        'weight' => 2,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content);
      $changed = TRUE;
    }
    if ($changed) {
      $editable->save();
      $messages[] = 'Updated contributor form display for type field.';
    }
  }

  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Contributor type updated to multi-select. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Set widgets to select lists for multi-valued fields on issues and contributors.
 */
function ai_dashboard_update_9007() {
  $messages = [];
  // Issue form: set field_issue_dashboard_category to options_select.
  $issue_form = 'core.entity_form_display.node.ai_issue.default';
  if (\Drupal::service('config.storage')->exists($issue_form)) {
    $editable = \Drupal::configFactory()->getEditable($issue_form);
    $content = $editable->get('content') ?: [];
    $comp = $content['field_issue_dashboard_category'] ?? NULL;
    if ($comp === NULL || ($comp['type'] ?? '') !== 'options_select') {
      $content['field_issue_dashboard_category'] = [
        'type' => 'options_select',
        'weight' => isset($comp['weight']) ? $comp['weight'] : 6,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content)->save();
      $messages[] = 'Set issue dashboard category widget to select.';
    }
  }

  // Contributor form: set field_contributor_type to options_select.
  $contrib_form = 'core.entity_form_display.node.ai_contributor.default';
  if (\Drupal::service('config.storage')->exists($contrib_form)) {
    $editable = \Drupal::configFactory()->getEditable($contrib_form);
    $content = $editable->get('content') ?: [];
    $comp = $content['field_contributor_type'] ?? NULL;
    if ($comp === NULL || ($comp['type'] ?? '') !== 'options_select') {
      $content['field_contributor_type'] = [
        'type' => 'options_select',
        'weight' => isset($comp['weight']) ? $comp['weight'] : 2,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content)->save();
      $messages[] = 'Set contributor type widget to select.';
    }
  }

  // Clear field caches for UI.
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Updated widgets to selects. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Switch issue/contributor audience widgets to checkboxes.
 */
function ai_dashboard_update_9008() {
  $messages = [];
  // Issue form: set dashboard category to options_buttons (checkboxes).
  $issue_form = 'core.entity_form_display.node.ai_issue.default';
  if (\Drupal::service('config.storage')->exists($issue_form)) {
    $editable = \Drupal::configFactory()->getEditable($issue_form);
    $content = $editable->get('content') ?: [];
    $comp = $content['field_issue_dashboard_category'] ?? [];
    if (($comp['type'] ?? '') !== 'options_buttons') {
      $content['field_issue_dashboard_category'] = [
        'type' => 'options_buttons',
        'weight' => isset($comp['weight']) ? $comp['weight'] : 6,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content)->save();
      $messages[] = 'Issue dashboard category widget set to checkboxes.';
    }
  }

  // Contributor form: set contributor type to options_buttons (checkboxes).
  $contrib_form = 'core.entity_form_display.node.ai_contributor.default';
  if (\Drupal::service('config.storage')->exists($contrib_form)) {
    $editable = \Drupal::configFactory()->getEditable($contrib_form);
    $content = $editable->get('content') ?: [];
    $comp = $content['field_contributor_type'] ?? [];
    if (($comp['type'] ?? '') !== 'options_buttons') {
      $content['field_contributor_type'] = [
        'type' => 'options_buttons',
        'weight' => isset($comp['weight']) ? $comp['weight'] : 2,
        'region' => 'content',
        'settings' => [],
        'third_party_settings' => [],
      ];
      $editable->set('content', $content)->save();
      $messages[] = 'Contributor type widget set to checkboxes.';
    }
  }

  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Switched widgets to checkboxes. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Migrate import configs: legacy boolean -> audiences; remove boolean usage.
 */
function ai_dashboard_update_9009() {
  $messages = [];
  /** @var \Drupal\ai_dashboard\Entity\ModuleImport[] $configs */
  $storage = \Drupal::entityTypeManager()->getStorage('module_import');
  $ids = $storage->getQuery()->accessCheck(FALSE)->execute();
  if (!empty($ids)) {
    $configs = $storage->loadMultiple($ids);
    foreach ($configs as $config) {
      $audiences = method_exists($config, 'getImportAudiences') ? $config->getImportAudiences() : [];
      // Remove legacy boolean key from config if present.
      $raw = $config->toArray();
      $legacy = !empty($raw['mark_non_developer_issues']);
      if (array_key_exists('mark_non_developer_issues', $raw)) {
        unset($raw['mark_non_developer_issues']);
        foreach ($raw as $k => $v) { $config->set($k, $v); }
        $config->save();
      }
      if (empty($audiences) && $legacy) {
        if (method_exists($config, 'setImportAudiences')) {
          $config->setImportAudiences(['non_dev']);
        }
        $config->save();
        $messages[] = t('Migrated @id to audiences [non_dev]', ['@id' => $config->id()]);
      }
    }
  }
  return t('Migrated legacy Non-developer checkbox to audiences. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Rename labels from Non-Developer/Management to Organisational (now superseded by update 9013).
 */
function ai_dashboard_update_9010() {
  $messages = [];
  // Update Issue Dashboard Category labels.
  $fs = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  if ($storage = $fs->load('node.field_issue_dashboard_category')) {
    $allowed = $storage->getSetting('allowed_values');
    if (is_array($allowed)) {
      // Allowed values may be associative or sequential arrays.
      $changed = FALSE;
      foreach ($allowed as $k => $v) {
        if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
          if (($v['label'] ?? '') !== 'Organisational') {
            $allowed[$k]['label'] = 'Organisational';
            $changed = TRUE;
          }
        }
        elseif (!is_array($v) && $k === 'non_dev' && $v !== 'Organisational') {
          $allowed[$k] = 'Organisational';
          $changed = TRUE;
        }
      }
      if ($changed) {
        $storage->setSetting('allowed_values', $allowed)->save();
        $messages[] = 'Updated issue dashboard category label to Organisational.';
      }
    }
  }

  // Update Contributor Type labels.
  if ($storage = $fs->load('node.field_contributor_type')) {
    $allowed = $storage->getSetting('allowed_values');
    if (is_array($allowed)) {
      $changed = FALSE;
      foreach ($allowed as $k => $v) {
        if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
          if (($v['label'] ?? '') !== 'Organisational') {
            $allowed[$k]['label'] = 'Organisational';
            $changed = TRUE;
          }
        }
        elseif (!is_array($v) && $k === 'non_dev' && $v !== 'Organisational') {
          $allowed[$k] = 'Organisational';
          $changed = TRUE;
        }
      }
      if ($changed) {
        $storage->setSetting('allowed_values', $allowed)->save();
        $messages[] = 'Updated contributor type label to Organisational.';
      }
    }
  }

  // Update Company Audience labels (if field exists).
  if ($storage = $fs->load('node.field_company_audience')) {
    $allowed = $storage->getSetting('allowed_values');
    if (is_array($allowed)) {
      $changed = FALSE;
      foreach ($allowed as $k => $v) {
        if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
          if (($v['label'] ?? '') !== 'Organisational') {
            $allowed[$k]['label'] = 'Organisational';
            $changed = TRUE;
          }
        }
        elseif (!is_array($v) && $k === 'non_dev' && $v !== 'Organisational') {
          $allowed[$k] = 'Organisational';
          $changed = TRUE;
        }
      }
      if ($changed) {
        $storage->setSetting('allowed_values', $allowed)->save();
        $messages[] = 'Updated company audience label to Organisational.';
      }
    }
  }

  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Updated labels to Organisational. @m', ['@m' => implode(' | ', $messages)]);
}

/**
 * Add field_historical_assignees to preserve assignment history.
 */
function ai_dashboard_update_9011() {
  $field_storage_manager = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_manager = \Drupal::entityTypeManager()->getStorage('field_config');

  // Create historical_assignees field storage.
  $historical_storage = $field_storage_manager->load('node.field_historical_assignees');
  if (!$historical_storage) {
    $historical_storage = $field_storage_manager->create([
      'field_name' => 'field_historical_assignees',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'node',
      ],
      'module' => 'core',
      'locked' => FALSE,
      'cardinality' => -1,
      'translatable' => FALSE,
    ]);
    $historical_storage->save();
  }

  // Create field instance for ai_issue bundle.
  $historical_field = $field_manager->load('node.ai_issue.field_historical_assignees');
  if (!$historical_field) {
    $historical_field = $field_manager->create([
      'field_name' => 'field_historical_assignees',
      'entity_type' => 'node',
      'bundle' => 'ai_issue',
      'label' => 'Historical Assignees',
      'description' => 'All contributors who have ever been assigned to this issue. Can be manually edited to remove historical assignments.',
      'required' => FALSE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [
          'target_bundles' => ['ai_contributor'],
          'auto_create' => FALSE,
        ],
      ],
    ]);
    $historical_field->save();
  }

  // Migrate current assignees to historical assignees for all existing issues.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'ai_issue')
    ->accessCheck(FALSE);
  $issue_ids = $query->execute();

  if (!empty($issue_ids)) {
    $issues = \Drupal\node\Entity\Node::loadMultiple($issue_ids);
    foreach ($issues as $issue) {
      if ($issue->hasField('field_issue_assignees') && !$issue->get('field_issue_assignees')->isEmpty()) {
        // Copy current assignees to historical assignees.
        $current_assignees = [];
        foreach ($issue->get('field_issue_assignees') as $assignee) {
          $current_assignees[] = ['target_id' => $assignee->target_id];
        }
        $issue->set('field_historical_assignees', $current_assignees);
        $issue->save();
      }
    }
  }

  // Update entity form display to show the new field.
  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.ai_issue.default');
  
  if ($form_display) {
    $form_display->setComponent('field_historical_assignees', [
      'type' => 'entity_reference_autocomplete',
      'weight' => 12,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'placeholder' => '',
      ],
    ])->save();
  }

  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Added field_historical_assignees field and migrated existing assignments.');
}

/**
 * Replace old assignment system with new AssignmentRecord entity system.
 */
function ai_dashboard_update_9012() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  
  // Step 1: Remove the flawed field_historical_assignees field we added in 9011
  $field_storage_manager = $entity_type_manager->getStorage('field_storage_config');
  $field_manager = $entity_type_manager->getStorage('field_config');
  
  // Delete field instance first
  $historical_field = $field_manager->load('node.ai_issue.field_historical_assignees');
  if ($historical_field) {
    $historical_field->delete();
  }
  
  // Delete field storage
  $historical_storage = $field_storage_manager->load('node.field_historical_assignees');
  if ($historical_storage) {
    $historical_storage->delete();
  }

  // Step 2: Remove old assignment_date field (as requested - no data preservation)
  $assignment_date_field = $field_manager->load('node.ai_issue.field_issue_assignment_date');
  if ($assignment_date_field) {
    $assignment_date_field->delete();
  }
  
  $assignment_date_storage = $field_storage_manager->load('node.field_issue_assignment_date');
  if ($assignment_date_storage) {
    $assignment_date_storage->delete();
  }

  // Step 3: Install the new assignment_record entity type
  // The entity type will be automatically discovered and installed
  // because we defined it in src/Entity/AssignmentRecord.php
  
  // Force entity type discovery
  \Drupal::service('entity_type.manager')->clearCachedDefinitions();
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  
  // Install the assignment_record entity type
  $assignment_record_definition = $entity_type_manager->getDefinition('assignment_record', FALSE);
  if ($assignment_record_definition && !$entity_definition_update_manager->getEntityType('assignment_record')) {
    $entity_definition_update_manager->installEntityType($assignment_record_definition);
  }

  // Step 4: Update form displays to remove deleted fields
  $form_display = $entity_type_manager
    ->getStorage('entity_form_display')
    ->load('node.ai_issue.default');
  
  if ($form_display) {
    $form_display->removeComponent('field_issue_assignment_date');
    $form_display->removeComponent('field_historical_assignees');
    $form_display->save();
  }

  // Update view displays
  $view_display = $entity_type_manager
    ->getStorage('entity_view_display')
    ->load('node.ai_issue.default');
  
  if ($view_display) {
    $view_display->removeComponent('field_issue_assignment_date');
    $view_display->removeComponent('field_historical_assignees');
    $view_display->save();
  }

  // Step 5: Clear all caches
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
  \Drupal::service('plugin.manager.field.formatter')->clearCachedDefinitions();
  drupal_flush_all_caches();

  return t('Replaced old assignment system with new AssignmentRecord entity type. Old assignment data has been cleared as requested.');
}

/**
 * Update labels from Organisational to Organizational (US spelling).
 */
function ai_dashboard_update_9013() {
  $messages = [];
  
  // Update AI Issue Dashboard Category field.
  $storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_dashboard_category');
  if ($storage) {
    $allowed = $storage->getSetting('allowed_values');
    $changed = FALSE;
    
    foreach ($allowed as $k => $v) {
      if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
        if (($v['label'] ?? '') === 'Organisational') {
          $allowed[$k]['label'] = 'Organizational';
          $changed = TRUE;
        }
      }
      elseif (!is_array($v) && $k === 'non_dev' && $v === 'Organisational') {
        $allowed[$k] = 'Organizational';
        $changed = TRUE;
      }
    }
    
    if ($changed) {
      $storage->setSetting('allowed_values', $allowed)->save();
      $messages[] = 'Updated issue dashboard category label to Organizational.';
    }
  }
  
  // Update AI Contributor Type field.
  $storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_contributor_type');
  if ($storage) {
    $allowed = $storage->getSetting('allowed_values');
    $changed = FALSE;
    
    foreach ($allowed as $k => $v) {
      if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
        if (($v['label'] ?? '') === 'Organisational') {
          $allowed[$k]['label'] = 'Organizational';
          $changed = TRUE;
        }
      }
      elseif (!is_array($v) && $k === 'non_dev' && $v === 'Organisational') {
        $allowed[$k] = 'Organizational';
        $changed = TRUE;
      }
    }
    
    if ($changed) {
      $storage->setSetting('allowed_values', $allowed)->save();
      $messages[] = 'Updated contributor type label to Organizational.';
    }
  }
  
  // Update AI Company Audience field.
  $storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_company_audience');
  if ($storage) {
    $allowed = $storage->getSetting('allowed_values');
    $changed = FALSE;
    
    foreach ($allowed as $k => $v) {
      if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
        if (($v['label'] ?? '') === 'Organisational') {
          $allowed[$k]['label'] = 'Organizational';
          $changed = TRUE;
        }
      }
      elseif (!is_array($v) && $k === 'non_dev' && $v === 'Organisational') {
        $allowed[$k] = 'Organizational';
        $changed = TRUE;
      }
    }
    
    if ($changed) {
      $storage->setSetting('allowed_values', $allowed)->save();
      $messages[] = 'Updated company audience label to Organizational.';
    }
  }
  
  // Update import audience field.
  $storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_import_audiences');
  if ($storage) {
    $allowed = $storage->getSetting('allowed_values');
    $changed = FALSE;
    
    foreach ($allowed as $k => $v) {
      if (is_array($v) && isset($v['value']) && $v['value'] === 'non_dev') {
        if (($v['label'] ?? '') === 'Organisational') {
          $allowed[$k]['label'] = 'Organizational';
          $changed = TRUE;
        }
      }
      elseif (!is_array($v) && $k === 'non_dev' && $v === 'Organisational') {
        $allowed[$k] = 'Organizational';
        $changed = TRUE;
      }
    }
    
    if ($changed) {
      $storage->setSetting('allowed_values', $allowed)->save();
      $messages[] = 'Updated import audience label to Organizational.';
    }
  }
  
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  return t('Updated labels from Organisational to Organizational (US spelling). @m', ['@m' => implode(' | ', $messages)]);
}
